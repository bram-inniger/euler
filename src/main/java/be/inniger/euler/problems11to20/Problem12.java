package be.inniger.euler.problems11to20;

import be.inniger.euler.util.Math;

import java.util.stream.IntStream;

// TODO revisit one day to speed up the solution

/**
 * Highly divisible triangular number
 * <p>
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem12 {

  private static final int MINIMUM_NR_DIVISORS = 500 + 1;

  public int solve() {
    return IntStream.iterate(1, Math::inc)
        .map(this::getNthTriangle)
        .dropWhile(triangle -> getNrDivisors(triangle) < MINIMUM_NR_DIVISORS)
        .findFirst()
        .orElseThrow();
  }

  private int getNthTriangle(int n) {
    return (n + 1) * n / 2;
  }

  private int getNrDivisors(int number) {
//    int biggestPotentialPrimeDivisor = Math.roundedSqrt(number);
//
//    return StreamSupport.stream(UnboundPrimeSupplier.getInstance().spliterator(), false)
//        .takeWhile(prime -> prime <= biggestPotentialPrimeDivisor)
//        .map(prime -> Math.getFactor(number, prime))
//        .mapToInt(Factor::getFrequency)
//        .map(Math::inc)
//        .reduce(1, Math::multiply);

    return 42; // FIXME
  }
}
