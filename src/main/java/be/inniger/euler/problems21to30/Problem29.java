/*
 * Project Euler solution repository
 * Copyright (C) 2016 Bram Inniger
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */

package be.inniger.euler.problems21to30;

import java.math.BigInteger;
import java.util.HashSet;
import java.util.Set;
import org.jetbrains.annotations.NotNull;

import be.inniger.euler.Problem;

/**
 * Problem from Project Euler:
 * <p>
 * Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 * 2^2=4, 2^3=8, 2^4=16, 2^5=32
 * 3^2=9, 3^3=27, 3^4=81, 3^5=243
 * 4^2=16, 4^3=64, 4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 *
 * @author Bram Inniger
 * @version 1.0
 */
public class Problem29 implements Problem {

  private static final int LIMIT = 100;

  /**
   * Naive solution, simply calculate every combination, and put them in a Set (guarantees uniqueness).
   * Size of the Set is the answer.
   *
   * A more neat pen-and-paper solution would consist of counting all of the duplicates (e.g. a=2, b=4 and a=4, b=2) and subtracting them from the 99*99 possible solution.
   */
  @NotNull
  @Override
  public String solve() {
    Set<BigInteger> terms = new HashSet<>();

    for (int a = 2; a <= LIMIT; a++) {
      for (int b = 2; b <= LIMIT; b++) {
        terms.add(BigInteger.valueOf(a).pow(b));
      }
    }

    return "" + terms.size();
  }
}
