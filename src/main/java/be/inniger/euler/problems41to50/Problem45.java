/*
 * Project Euler solution repository
 * Copyright (C) 2016 Bram Inniger
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */

package be.inniger.euler.problems41to50;

import org.jetbrains.annotations.NotNull;

import be.inniger.euler.Problem;
import be.inniger.euler.util.Num;

/**
 * Problem from Project Euler:
 * <p>
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 * Triangle    T_n=n(n+1)/2     1, 3, 6, 10, 15, ...
 * Pentagonal  P_n=n(3n−1)/2    1, 5, 12, 22, 35, ...
 * Hexagonal   H_n=n(2n−1)      1, 6, 15, 28, 45, ...
 * It can be verified that T_285 = P_165 = H_143 = 40755.
 * Find the next triangle number that is also pentagonal and hexagonal.
 *
 * @author Bram Inniger
 * @version 1.0
 */
public class Problem45 implements Problem {

  private static final int STARTING_VAL = 144; // H_143 is the previous solution, we want the next one

  /**
   * As the hexagonal numbers are "fewest" we will simply keep on generating these one by one, in increasing order, starting from the solution supplied above.
   * If the generated hexagonal number also happens to be a triangle and pentagonal number we found our solution.
   * A simple optimisation is checking if the number is hexagonal first, and only then triangle.
   * The reason for this is that the && short circuits, and the chance of isPentagonal returning true for a random number is smaller than that of isTriangle returning true.
   */
  @NotNull
  @Override
  public String solve() {
    int n = STARTING_VAL;

    while (true) {
      int hexagonal = n * (2*n - 1);

      if (Num.isPentagonal(hexagonal) && Num.isTriangle(hexagonal)) {
        return "" + hexagonal;
      }

      n++;
    }
  }
}
